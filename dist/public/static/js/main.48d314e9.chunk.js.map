{"version":3,"sources":["useSocket.tsx","Screen.tsx","Admin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","io","on","data","console","log","joinedRooms","useSocket","screenId","includes","emit","Screen","match","screenNumber","params","Admin","props","useState","rooms","setRooms","onClick","map","room","key","App","path","component","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAEMA,E,MAASC,GAAG,yBAElBD,EAAOE,GAAG,WAAW,SAACC,GACpBC,QAAQC,IAAI,mBAAoBF,MAGlCH,EAAOE,GAAG,cAAc,WACtBE,QAAQC,IAAI,mBAGd,IAAMC,EAAwB,GAEvB,SAASC,EAAUC,GAKxB,OAJIA,IAAaF,EAAYG,SAASD,IACpCR,EAAOU,KAAK,OAAQF,GAGfR,ECRF,IAAMW,EAA0B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAChCC,GADsD,yBACrCD,EAAME,OAAvBD,cAEON,EAAU,UAAD,OAAWM,IAEnC,OAAO,uDAA+BA,I,QCT3BE,EAAwB,SAACC,GAAW,IAAD,EACpBC,mBAAmB,IADC,mBACvCC,EADuC,KAChCC,EADgC,KAExCnB,EAASO,IACfH,QAAQC,IAAIL,GAMZ,OACE,6BACE,4BAAQoB,QANO,WACjBpB,EAAOU,KAAK,YAAaS,KAKvB,aACA,4BACGD,EAAMG,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,GAAOA,SCCXE,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWX,IAC/B,kBAAC,IAAD,CAAOU,KAAK,yBAAyBC,UAAWf,IAChD,kBAAC,IAAD,CAAUgB,GAAG,aCJDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.48d314e9.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:4001\");\n\nsocket.on(\"connect\", (data: any) => {\n  console.log(\"socket connected\", data);\n});\n\nsocket.on(\"disconnect\", () => {\n  console.log(\"Disconnected\");\n});\n\nconst joinedRooms: string[] = [];\n\nexport function useSocket(screenId?: string) {\n  if (screenId && !joinedRooms.includes(screenId)) {\n    socket.emit(\"join\", screenId);\n  }\n\n  return socket;\n}\n","import * as React from \"react\";\nimport { FC } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { useSocket } from \"./useSocket\";\n\ninterface RouteProps {\n  screenNumber?: string;\n}\n\ninterface ScreenProps extends RouteComponentProps<RouteProps> {}\n\nexport const Screen: FC<ScreenProps> = ({ match, ...props }) => {\n  const { screenNumber } = match.params;\n\n  const socket = useSocket(`screen/${screenNumber}`);\n\n  return <div>Hello, I'm screen number {screenNumber}</div>;\n};\n","import React, { useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { FC } from \"react\";\nimport { useSocket } from \"./useSocket\";\n\ninterface AdminProps extends RouteComponentProps {}\n\nexport const Admin: FC<AdminProps> = (props) => {\n  const [rooms, setRooms] = useState<string[]>([]);\n  const socket = useSocket();\n  console.log(socket);\n\n  const getServers = () => {\n    socket.emit(\"get rooms\", setRooms);\n  };\n\n  return (\n    <div>\n      <button onClick={getServers}>Get Rooms</button>\n      <ul>\n        {rooms.map((room) => (\n          <li key={room}>{room}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport { Screen } from \"./Screen\";\nimport { Admin } from \"./Admin\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/play\" component={Admin} />\n        <Route path=\"/screen/:screenNumber?\" component={Screen} />\n        <Redirect to=\"/play\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}